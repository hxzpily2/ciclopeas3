<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()"
				width="400" title="{resourceManager.getString('language', 'SW_TITLE')}">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
		
		// FLASH PACKAGES
		import mx.managers.PopUpManager;
		import mx.core.FlexGlobals;
		import flash.display.DisplayObject;
		
		// CICLOPE CLASSES
		import art.ciclope.sitioeditor.ServerInteraction;
		
		// VARIABLES
		
		private var _server:ServerInteraction;		// the server connection
		
		// PUBLIC VARIABLES
		
		/**
		 * Script name to call on server.
		 */
		public var script:String;
		/**
		 * Parameters to send to the script (url-formatted string with name/value pairs).
		 */
		public var parameter:String;
		/**
		 * A function to call on server return. Must receive a ServereInteraction object as parameter.
		 * @see	art.ciclope.sitioeditor.ServerInteraction
		 */
		public var action:Function;
		/**
		 * Try to handle script access errors?
		 */
		public var handleError:Boolean = true;
		
		// STATIC STATEMENTS
		
		/**
		 * Create a server interaction window and show it.
		 * @param	script	the script name to call
		 * @param	parameter	url-enconded name/value pairs
		 * @param	action	a function to call on servere response
		 * @param	handle	try to handle script access errors with warning message
		 */
		public static function createServer(script:String, parameter:String, action:Function, handle:Boolean = true):void {
			var server:art.ciclope.sitioeditor.WindowServerCheck = new art.ciclope.sitioeditor.WindowServerCheck();
			server.script = script;
			server.parameter = parameter;
			server.action = action;
			server.handleError = handle;
			PopUpManager.addPopUp(server, DisplayObject(FlexGlobals.topLevelApplication), true);
			PopUpManager.centerPopUp(server);
			server.call();
		}
		
		/**
		 * Component initialize.
		 */
		private function init():void {
			this.closeButton.visible = false;
		}
		
		// PUBLIC METHODS
		
		/**
		 * Call server and wait for response.
		 */
		public function call():void {
			this._server = new ServerInteraction();
			this._server.addEventListener(ServerEvent.SERVER_OK, onServerOK);
			this._server.addEventListener(ServerEvent.SERVER_AGENT, onServerError);
			this._server.addEventListener(ServerEvent.SERVER_CONTENT, onServerError);
			this._server.addEventListener(ServerEvent.SERVER_ERROR, onServerError);
			this._server.addEventListener(ServerEvent.SERVER_NOTFOUND, onServerError);
			this._server.call(this.script, this.parameter);
		}
		
		/**
		 * Release memory used by this object.
		 */
		public function kill():void {
			this._server.removeEventListener(ServerEvent.SERVER_OK, onServerOK);
			this._server.removeEventListener(ServerEvent.SERVER_AGENT, onServerError);
			this._server.removeEventListener(ServerEvent.SERVER_CONTENT, onServerError);
			this._server.removeEventListener(ServerEvent.SERVER_ERROR, onServerError);
			this._server.removeEventListener(ServerEvent.SERVER_NOTFOUND, onServerError);
			this._server = null;
			this.action = null;
			this.script = null;
			this.parameter = null;
		}
		
		// EVENTS
		
		/**
		 * Server returned as expected.
		 */
		private function onServerOK(evt:ServerEvent):void {
			this.action(evt.reference);
			this.kill();
			PopUpManager.removePopUp(this);
		}
		
		/**
		 * Error on server return.
		 */
		private function onServerError(evt:ServerEvent):void {
			if (this.handleError) {
				if (evt.type == ServerEvent.SERVER_NOTFOUND) {
					Warning.createWarning(resourceManager.getString('language', 'SW_ERRORTITLE'), resourceManager.getString('language', 'SW_NOSERVER'));
				} else if ((evt.type == ServerEvent.SERVER_AGENT) || (evt.type == ServerEvent.SERVER_CONTENT)) {
					Warning.createWarning(resourceManager.getString('language', 'SW_ERRORTITLE'), resourceManager.getString('language', 'SW_NOCONTENT'));
				}
			}
			this.action(evt.reference);
			this.kill();
			PopUpManager.removePopUp(this);
		}
		
		]]>
	</fx:Script>
	
	<s:HGroup x="0" y="0" width="100%" horizontalAlign="center" verticalAlign="bottom" styleName="paddingGroup">
		<s:SWFLoader width="50" height="20" source="waiting.swf"/>
		<s:Label text="{resourceManager.getString('language', 'SW_WAIT')}"/>
	</s:HGroup>
</s:TitleWindow>